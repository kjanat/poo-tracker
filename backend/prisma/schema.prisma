// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/**
 * Core User Model
 */
model User {
    id        String   @id @default(cuid())
    email     String   @unique
    name      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    auth        UserAuth?
    settings    UserSettings?
    entries     Entry[]
    meals       Meal[]
    symptoms    Symptom[]
    medications Medication[]

    @@index([createdAt]) // For user registration analytics
    @@map("users")
}

/**
 * Security & Authentication
 */
model UserAuth {
    id               String    @id @default(cuid())
    userId           String    @unique
    passwordHash     String // More explicit naming
    salt             String // Add salt field
    loginAttempts    Int       @default(0)
    lockedUntil      DateTime?
    lastLogin        DateTime?
    resetToken       String? // For password reset
    resetTokenExpiry DateTime?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt // Prisma auto-updates this field on record modification

    // Relations
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    twoFactor UserTwoFactor?
    // Note: Prisma automatically creates an index on userId (foreign key)

    @@index([resetToken])
    @@map("user_auth")
}

/**
 * Two-Factor Authentication (separated for better security architecture)
 */
model UserTwoFactor {
    id          String   @id @default(cuid())
    userAuthId  String   @unique
    secret      String // TOTP secret
    enabled     Boolean  @default(false)
    backupCodes String[] // Array of backup codes
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    userAuth UserAuth @relation(fields: [userAuthId], references: [id], onDelete: Cascade)

    @@map("user_two_factor")
}

/**
 * User Preferences
 */
model UserSettings {
    id                String   @id @default(cuid())
    userId            String   @unique
    timezone          String   @default("UTC")
    reminderEnabled   Boolean  @default(true)
    reminderTime      String   @default("09:00") // Store as HH:MM format - required if reminders enabled
    dataRetentionDays Int      @default(365)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt // Prisma auto-updates this field on record modification

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    // Note: Prisma automatically creates an index on userId (foreign key)

    @@map("user_settings")
}

/**
 * Main Entry Model
 */
model Entry {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt // Prisma auto-updates this field on record modification

    // Bristol Stool Chart (1-7) - required for meaningful health tracking
    bristolType Int @db.SmallInt

    // Physical characteristics (using enums for type safety)
    volume      Volume?
    color       Color?
    consistency Consistency?
    floaters    Boolean      @default(false)

    // Experience (1-10 scales) - required for comprehensive tracking
    pain         Int @default(1) @db.SmallInt // 1-10 scale
    strain       Int @default(1) @db.SmallInt // 1-10 scale  
    satisfaction Int @default(5) @db.SmallInt // 1-10 scale

    // Optional fields
    photoUrl String?
    smell    SmellLevel?

    // Relations
    user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    details  EntryDetails?
    meals    MealEntryRelation[]
    symptoms Symptom[]
    // Note: Prisma automatically creates an index on userId (foreign key)

    @@index([userId, createdAt]) // Primary query pattern
    @@index([createdAt]) // For date-based queries
    @@index([bristolType]) // For health analytics
    @@map("entries")
}

/**
 * Separate large fields for performance
 */
model EntryDetails {
    id      String @id @default(cuid())
    entryId String @unique

    notes      String?
    aiAnalysis Json?

    entry Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)

    @@map("entry_details")
}

/**
 * Meal Tracking
 */
model Meal {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String?
    mealTime    DateTime

    category MealCategory?
    cuisine  String? // Italian, Mexican, Fast Food, etc.

    spicyLevel Int?    @db.SmallInt // 1-10 scale
    fiberRich  Boolean @default(false)
    dairy      Boolean @default(false)
    gluten     Boolean @default(false)

    photoUrl String?
    notes    String?

    // Relations
    user    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    entries MealEntryRelation[]

    @@index([userId, mealTime]) // Primary query pattern
    @@index([mealTime]) // For chronological queries
    @@map("meals")
}

/**
 * Junction table for many-to-many relationship between meals and entries
 */
model MealEntryRelation {
    id      String @id @default(cuid())
    mealId  String
    entryId String

    // Relations
    meal  Meal  @relation(fields: [mealId], references: [id], onDelete: Cascade)
    entry Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)

    @@unique([mealId, entryId])
    @@map("meal_entry_relations")
}

/**
 * Symptom Tracking
 */
model Symptom {
    id        String   @id @default(cuid())
    userId    String
    entryId   String? // Optional link to entry
    createdAt DateTime @default(now())

    type     SymptomType
    severity Int         @db.SmallInt // 1-10 scale
    notes    String?

    user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    entry Entry? @relation(fields: [entryId], references: [id], onDelete: SetNull)

    @@index([userId, createdAt])
    @@map("symptoms")
}

/**
 * Medication/Supplement Tracking
 */
model Medication {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt // Prisma auto-updates this field on record modification

    name      String
    dosage    String?
    frequency String?
    startDate DateTime
    endDate   DateTime?
    notes     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    // Note: Prisma automatically creates an index on userId (foreign key)

    @@index([userId, startDate]) // For chronological queries
    @@index([userId, endDate]) // For querying active medications by end date
    @@map("medications")
}

/**
 * Enums for Data Validation & Type Safety
 * Note: @@map can be added to enums if you need database-level value mapping
 */
enum Volume {
    SMALL
    MEDIUM
    LARGE
    MASSIVE

    @@map("volume_enum")
}

enum Color {
    BROWN
    DARK_BROWN
    LIGHT_BROWN
    YELLOW
    GREEN
    RED
    BLACK

    @@map("color_enum")
}

enum Consistency {
    SOLID
    SOFT
    LOOSE
    WATERY

    @@map("consistency_enum")
}

enum SmellLevel {
    NONE
    MILD
    MODERATE
    STRONG
    TOXIC

    @@map("smell_level_enum")
}

enum MealCategory {
    BREAKFAST
    LUNCH
    DINNER
    SNACK

    @@map("meal_category_enum")
}

enum SymptomType {
    BLOATING
    CRAMPS
    NAUSEA
    HEARTBURN
    CONSTIPATION
    DIARRHEA
    GAS
    FATIGUE
    OTHER

    @@map("symptom_type_enum")
}
