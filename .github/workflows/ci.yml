name: 🧪 CI

on:
  push:
    branches: [master, develop]
  pull_request:
  #   branches: [master, develop]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [22, 24]
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: 📦 Install dependencies
        run: make init-frontend
      - name: 🔍 Type check
        run: cd frontend && pnpm type-check
      - name: 🧹 Lint
        run: make lint-frontend
      - name: 🧪 Test
        run: make test-frontend
      - name: Upload results to Trunk
        if: success() || failure()
        uses: trunk-io/analytics-uploader@main
        with:
          junit-paths: frontend-junit.xml
          org-slug: ${{ vars.TRUNK_ORG_SLUG }}
          token: ${{ secrets.TRUNK_API_TOKEN }}
        continue-on-error: true
      - name: 🏗️ Build
        run: make build-frontend

  test-backend:
    name: 🚀 Backend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        go-version: [1.22, 1.23, 1.24]
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: 📦 Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: 📦 Install dependencies
        run: make init-backend
      - name: 🔍 Lint
        run: |
          # Install golangci-lint
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6

          # Run linting
          make lint-backend
      - name: 🧪 Test
        run: make test-backend
      - name: Upload results to Trunk
        if: success() || failure()
        uses: trunk-io/analytics-uploader@main
        with:
          junit-paths: backend-junit.xml
          org-slug: ${{ vars.TRUNK_ORG_SLUG }}
          token: ${{ secrets.TRUNK_API_TOKEN }}
        continue-on-error: true
      - name: 🏗️ Build
        run: make build-backend

  test-ai-service:
    name: 🤖 AI Service Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        python-version: ['3.12', '3.13']
    services:
      redis:
        image: redis:8-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: 📦 Install uv and 🐍 Python ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v6
        id: setup-uv
        with:
          activate-environment: true
          working-directory: ai-service
          version: latest
          python-version: ${{ matrix.python-version }}
      - name: 📦 Install dependencies
        run: make init-ai
      - name: 🦀 Lint with Ruff
        run: make lint-ai
      - name: 🧪 Test with pytest
        env:
          REDIS_URL: redis://localhost:6379
        run: make test-ai
      - name: Upload results to Trunk
        if: success() || failure()
        uses: trunk-io/analytics-uploader@main
        with:
          junit-paths: '**/ai_service-junit.xml'
          org-slug: ${{ vars.TRUNK_ORG_SLUG }}
          token: ${{ secrets.TRUNK_API_TOKEN }}
        continue-on-error: true

  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-ai-service]
    permissions:
      contents: read
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: 🏗️ Build AI Service Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./ai-service/Dockerfile
          push: false
          sbom: true
          provenance: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: 🧪 Test Docker Compose
        run: |
          docker compose -f docker-compose.yml config
          echo "✅ Docker Compose configuration is valid"
