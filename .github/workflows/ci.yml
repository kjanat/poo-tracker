name: 🧪 CI

on:
  push:
    branches: [master, develop]
  pull_request:
  #   branches: [master, develop]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [22, 24]

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 📦 Install dependencies
        run: pnpm install

      - name: 🔍 Type check
        run: pnpm type-check:frontend

      - name: 🧹 Lint
        run: pnpm lint:frontend

      - name: 🧪 Test
        run: pnpm test:frontend

      - name: Upload results to Trunk
        # Run this step even if the test step ahead fails
        if: success() || failure()
        uses: trunk-io/analytics-uploader@main
        with:
          # Path to your test results.
          junit-paths: frontend-junit.xml
          # Provide your Trunk organization slug.
          org-slug: ${{ vars.TRUNK_ORG_SLUG }}
          # Provide your Trunk API token as a GitHub secret.
          token: ${{ secrets.TRUNK_API_TOKEN }}
        continue-on-error: true

      - name: 🏗️ Build
        run: pnpm build:frontend

  test-backend:
    name: 🚀 Backend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [22, 24]
    env:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      REDIS_URL: redis://localhost:6379

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:8-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 📦 Install dependencies
        run: pnpm install

      - name: 🗄️ Setup test database
        run: |
          pnpm db:generate
          pnpm db:migrate
          pnpm db:seed
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}

      - name: 🔍 Type check
        run: pnpm type-check:backend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}

      - name: 🧹 Lint
        run: pnpm lint:backend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}

      - name: 🧪 Test
        run: pnpm test:backend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}

      - name: Upload results to Trunk
        # Run this step even if the test step ahead fails
        if: success() || failure()
        uses: trunk-io/analytics-uploader@main
        with:
          # Path to your test results.
          junit-paths: backend-junit.xml
          # Provide your Trunk organization slug.
          org-slug: ${{ vars.TRUNK_ORG_SLUG }}
          # Provide your Trunk API token as a GitHub secret.
          token: ${{ secrets.TRUNK_API_TOKEN }}
        continue-on-error: true

      - name: 🏗️ Build
        run: pnpm build:backend

  test-ai-service:
    name: 🤖 AI Service Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read

    defaults:
      run:
        shell: bash
        working-directory: ./ai-service
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    services:
      redis:
        image: redis:8-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📦 Install uv and 🐍 Python ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v6
        id: setup-uv
        with:
          activate-environment: true
          working-directory: ai-service
          version: latest
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: uv sync

      - name: 🦀 Lint with Ruff
        run: |
          uv run ruff check . || \
            uv run ruff check . --fix && \
            echo "Fixed formatting"
          uv run ruff format .

      - name: 🧪 Test with pytest
        env:
          REDIS_URL: redis://localhost:6379
        run: |
          if [ -n "$(find . -name 'test_*.py' -o -name '*_test.py' -maxdepth 2 | head -1)" ]; then
            echo "Running tests..."
            uv run pytest --tb=auto -vv --junit-xml=ai_service-junit.xml
          else
            echo "No test files found (test_*.py or *_test.py), skipping tests"
            echo "✅ Test step completed (no tests to run)"
          fi

      - name: Upload results to Trunk
        # Run this step even if the test step ahead fails
        if: success() || failure()
        uses: trunk-io/analytics-uploader@main
        with:
          # Path to your test results.
          junit-paths: '**/ai_service-junit.xml'
          # Provide your Trunk organization slug.
          org-slug: ${{ vars.TRUNK_ORG_SLUG }}
          # Provide your Trunk API token as a GitHub secret.
          token: ${{ secrets.TRUNK_API_TOKEN }}
        continue-on-error: true

  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-ai-service]
    permissions:
      contents: read

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build AI Service Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./ai-service/Dockerfile
          push: false
          sbom: true
          provenance: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker Compose
        run: |
          docker compose -f docker-compose.yml config
          echo "✅ Docker Compose configuration is valid"
