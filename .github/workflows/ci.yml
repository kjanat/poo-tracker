name: 🧪 CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type check
        run: pnpm run --filter frontend tsc --noEmit

      - name: 🧹 Lint
        run: pnpm run --filter frontend lint

      - name: 🧪 Test
        run: pnpm run --filter frontend test

      - name: 🏗️ Build
        run: pnpm run --filter frontend build

  test-backend:
    name: 🚀 Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type check
        run: pnpm run --filter backend tsc --noEmit

      - name: 🧹 Lint
        run: pnpm run --filter backend lint

      - name: 🗄️ Setup test database
        run: |
          cd backend
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" > .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          pnpm run db:generate
          pnpm run db:migrate

      - name: 🧪 Test
        run: pnpm run --filter backend test

      - name: 🏗️ Build
        run: pnpm run --filter backend build

  test-ai-service:
    name: 🤖 AI Service Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          cd ai-service
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: 🧹 Lint with flake8
        run: |
          cd ai-service
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🧹 Format check with black
        run: |
          cd ai-service
          pip install black
          black --check .

      - name: 🧪 Test with pytest
        run: |
          cd ai-service
          pytest

  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-ai-service]

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build AI Service Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./ai-service
          file: ./ai-service/Dockerfile
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker Compose
        run: |
          docker-compose -f docker-compose.yml config
          echo "✅ Docker Compose configuration is valid"
