name: üé® Convert SVG Assets

on:
  push:
    paths:
      - 'branding/**/*.svg'
  pull_request:
    branches: [master, develop]
    # Run if PR branch name contains 'svg'
    # This allows testing SVG changes in feature branches
  workflow_dispatch:
    inputs:
      svg-path:
        description: 'Path to SVG file to convert'
        required: true
        default: 'branding/logo.svg'
      formats:
        description: 'Formats to generate (ico,png,react,react-native)'
        required: false
        default: 'ico,png,react,react-native'
      typescript:
        description: 'Generate TypeScript components'
        required: false
        default: false
        type: boolean

jobs:
  convert-svg:
    name: üé® Convert SVG to Multiple Formats
    runs-on: ubuntu-latest
    # Run on push to branding SVGs, manual dispatch, or PR with 'svg' in branch name
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && contains(github.head_ref, 'svg'))
    permissions:
      contents: write

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üé® Convert SVG Assets (Automatic)
        if: github.event_name == 'push'
        id: convert-auto
        uses: ./.github/actions/svg-converter
        with:
          svg-path: ${{ github.event.head_commit.modified[0] || 'branding/logo.svg' }}
          output-dir: 'branding/'
          formats: 'ico,png,react,react-native'
          png-sizes: '16,32,48,64,128,256,512'
          ico-sizes: '16,32,48,64'
          react-typescript: 'true'

      - name: üé® Convert SVG Assets (Manual)
        if: github.event_name == 'workflow_dispatch'
        id: convert-manual
        uses: ./.github/actions/svg-converter
        with:
          svg-path: ${{ github.event.inputs.svg-path }}
          output-dir: 'branding/'
          formats: ${{ github.event.inputs.formats }}
          png-sizes: '16,32,48,64,128,256,512'
          ico-sizes: '16,32,48,64'
          react-typescript: ${{ github.event.inputs.typescript }}

      - name: üé® Convert SVG Assets (Pull Request)
        if: github.event_name == 'pull_request'
        id: convert-pr
        uses: ./.github/actions/svg-converter
        with:
          svg-path: 'branding/logo.svg' # Default SVG for PR testing
          output-dir: 'branding/'
          formats: 'ico,png,react,react-native'
          png-sizes: '16,32,48,64,128,256,512'
          ico-sizes: '16,32,48,64'
          react-typescript: 'true'

      - name: üìã Show conversion results
        run: |
          echo "## üé® SVG Conversion Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "**Files created:** ${{ steps.convert-auto.outputs.files-created }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Summary:**" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.convert-auto.outputs.summary }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "**Files created:** ${{ steps.convert-manual.outputs.files-created }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Summary:**" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.convert-manual.outputs.summary }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "**Files created:** ${{ steps.convert-pr.outputs.files-created }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Summary:**" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.convert-pr.outputs.summary }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîç **Note:** This is a test conversion for PR branch \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üì§ Commit generated assets
        if: github.event_name != 'pull_request' # Don't commit on PRs
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add branding/

          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "## ‚ÑπÔ∏è No Changes" >> $GITHUB_STEP_SUMMARY
            echo "No new assets were generated (files may be identical)" >> $GITHUB_STEP_SUMMARY
          else
            git commit -m "üé® Auto-generate branding assets from SVG

            Generated by: ${{ github.event_name }}
            Trigger: ${{ github.event.head_commit.message || 'Manual workflow dispatch' }}
            Actor: ${{ github.actor }}"
            git push
            echo "## ‚úÖ Assets Committed" >> $GITHUB_STEP_SUMMARY
            echo "Generated assets have been committed to the repository" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üìã Show PR test results
        if: github.event_name == 'pull_request'
        run: |
          echo "## üß™ PR Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ SVG conversion test completed successfully for branch \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Generated files are available as artifacts but not committed to the PR branch." >> $GITHUB_STEP_SUMMARY
          echo "Assets will be committed when this PR is merged and triggers the main workflow." >> $GITHUB_STEP_SUMMARY

  convert-all-svgs:
    name: üé® Batch Convert All SVGs
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.svg-path == 'batch-all'
    permissions:
      contents: write

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üîç Find all SVG files
        id: find-svgs
        run: |
          svgs=$(find branding/ -name "*.svg" -type f | head -10)  # Limit to 10 to avoid overwhelming
          echo "Found SVG files:"
          echo "$svgs"
          echo "svg-files<<EOF" >> $GITHUB_OUTPUT
          echo "$svgs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üé® Convert each SVG
        run: |
          echo "## üé® Batch SVG Conversion Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          while IFS= read -r svg_file; do
            if [ -n "$svg_file" ]; then
              echo "Converting: $svg_file"
              base_name=$(basename "$svg_file" .svg)
              
              # Use the custom action for each file
              echo "::group::Converting $svg_file"
              docker run --rm \
                -v "${{ github.workspace }}:/workspace" \
                -w /workspace \
                -e INPUT_SVG_PATH="$svg_file" \
                -e INPUT_OUTPUT_DIR="branding/" \
                -e INPUT_FORMATS="${{ github.event.inputs.formats }}" \
                -e INPUT_PNG_SIZES="16,32,48,64,128,256" \
                -e INPUT_ICO_SIZES="16,32,48,64" \
                -e INPUT_REACT_TYPESCRIPT="${{ github.event.inputs.typescript }}" \
                -e INPUT_BASE_NAME="$base_name" \
                -e GITHUB_OUTPUT="/dev/null" \
                $(docker build -q .github/actions/svg-converter/)
              echo "::endgroup::"
              
              echo "- ‚úÖ **$svg_file** ‚Üí Multiple formats" >> $GITHUB_STEP_SUMMARY
            fi
          done <<< "${{ steps.find-svgs.outputs.svg-files }}"

      - name: üì§ Commit all generated assets
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add branding/

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üé® Batch convert all SVG assets

            Generated by: Batch workflow dispatch
            Actor: ${{ github.actor }}"
            git push
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ‚úÖ All Assets Committed" >> $GITHUB_STEP_SUMMARY
            echo "All generated assets have been committed to the repository" >> $GITHUB_STEP_SUMMARY
          fi
